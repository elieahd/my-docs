{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My Docs","text":"<p>My personal tech doc, to hold notes and references I want to go back to. </p>"},{"location":"architecture/hexagonal/","title":"Hexagonal Architecture","text":""},{"location":"architecture/hexagonal/#hexagonal-architecture","title":"Hexagonal Architecture","text":"<p>Hexagonal Architecture is a software design pattern that emphasizes separation of concerns, testability, and flexible infrastructure integration. </p> <p>It focuses on isolating the core business logic from external systems like databases, UIs, and APIs.</p> <p></p>"},{"location":"architecture/hexagonal/#core-domain","title":"Core domain","text":"<p>This is the center of the hexagon, and contains : Business rules, Domain models, Application services (use cases).</p> <p>It should not depend on any framework or external technology.</p>"},{"location":"architecture/hexagonal/#ports-interfaces","title":"Ports (Interfaces)","text":"<p>Ports define how the application expects to interact with the outside world.</p> <p>There are two types:</p> <ul> <li>Inbound Ports: Interfaces used to enter the application (e.g., use case interfaces, controller service interfaces)</li> <li>Outbound Ports: Interfaces the application uses to communicate outward (e.g., repository interfaces, messaging service interfaces)</li> </ul>"},{"location":"architecture/hexagonal/#adapters","title":"Adapters","text":"<p>Adapters implement the ports.</p> <p>There are two types:</p> <ul> <li>Inbound Adapters: Trigger the application (e.g., REST controllers, CLI handlers, message listeners)</li> <li>Outbound Adapters: Provide implementations for outbound ports (e.g., JPA repositories, REST clients, Kafka producers)</li> </ul>"},{"location":"architecture/hexagonal/#project-structure","title":"Project structure","text":"<pre><code>\u251c\u2500\u2500 domain\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 entities\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 inbound (ports)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 outbound (ports)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 services\n\u251c\u2500\u2500 infrastructure \n\u251c\u2500\u2500\u2500\u2500\u2500 inbound (adapters)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 rest\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 queues\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 batches\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 cli\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ...\n\u251c\u2500\u2500\u2500\u2500\u2500 outbound (adapters)\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 database \n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 queues\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 bucket\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 ...\n\u2514\u2500\u2500 \n</code></pre>"},{"location":"architecture/hexagonal/#use-case-blogger","title":"Use case : Blogger","text":"<p>Let's take a use case about designing a blogging platform that allow publish content in the form of posts.</p> <p>In the traditional architecture we would found ourself with the current structure </p> <pre><code>\u251c\u2500\u2500 models\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 Category\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 Post\n\u251c\u2500\u2500 repositories\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 CategoryRepository\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 PostRepository\n\u251c\u2500\u2500 services\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 CategoryService\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 PostService\n\u251c\u2500\u2500 controllers\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 PostController\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 CategoryController\n\u251c\u2500\u2500 BloggerApplication\n\u2514\u2500\u2500 \n</code></pre> <p>To apply the hexagonal architecture to current use case, we would end up with the following structure </p> <pre><code>\u251c\u2500\u2500 domain\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 entities\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Category\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Post\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 inbound\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CreatePost\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 SearchPost\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 GetCategories\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 outbound\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CategoryInventory\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PostInventory\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 services\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CategoryService\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PostService\n\u251c\u2500\u2500 infrastructure\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 inbound\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 rest\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CategoryRest\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PostRest\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 outbound\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 database\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 CategoryDatabaseInventory\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 PostDatabaseInventory\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500 BloggerApplication\n\u2514\u2500\u2500 \n</code></pre>"},{"location":"architecture/hexagonal/#unit-testing-with-in-stubs-in-memory-adapter","title":"Unit testing with in stubs (in memory adapter)","text":"<p>Whenever we write unit tests for our services, a common practice\u2014especially in traditional layered architectures\u2014is to mock the repository (or other external dependencies) using a library like Mockito. This allows us to isolate the unit under test and simulate various behaviors or responses from dependencies like databases, APIs, or message queues.</p> <p>However, in hexagonal (or ports and adapters) architecture, it is encouraged to avoid mocking outbound ports directly in favor of using stub or in-memory implementations of the corresponding adapters.</p> <p>Instead of mocking these interfaces using a mocking framework (which couples your tests to interaction details like method calls), hexagonal architecture suggests testing with real, but simple, implementations \u2014 like an in-memory adapter.</p> <p>This makes your tests more faithful to real scenarios, while staying fast and isolated.</p>"},{"location":"architecture/hexagonal/#with-mocks","title":"With mocks","text":"<pre><code>\nprivate PostInventory inventory;\nprivate PostService sut;\n\n@BeforeEach\nvoid setup() {\n    inventory = mock();\n    sut = new PostService(inventory);\n}\n\n@Test\nvoid shouldReturnPostById() throws PostNotFoundByIdException {\n    // Arrange\n    UUID id = UUID.randomUUID();\n    Post post = new Post(\"title1\", \"content1\", new Category(\"category1\"));\n    when(inventory.findById(id)).thenReturn(Optional.of(post));\n    // Act\n    Post actual = sut.getById(id);\n    // Assert\n    assertThat(actual).isEqualTo(post);\n}\n\n@Test\nvoid shouldThrowPostNotFoundByIdExceptionWhenGetByIdNotFoundId() {\n    // Arrange\n    UUID id = UUID.randomUUID();\n    when(inventory.findById(id)).thenReturn(Optional.empty());\n    // Act\n    Throwable thrown = catchThrowable(() =&gt; sut.getById(id));\n    // Assert\n    assertThat(thrown).isInstanceOf(PostNotFoundByIdException.class)\n            .hasMessage(\"Post with id \" + id + \" not found\", exception.getMessage());\n}\n</code></pre>"},{"location":"architecture/hexagonal/#with-stubs","title":"With stubs","text":"<pre><code>\nprivate PostInventory inventory;\nprivate PostService sut;\n\n@BeforeEach\nvoid setup() {\n    inventory = new PostInMemoryInventory();\n    sut = new PostService(inventory);\n}\n\n@Test\nvoid shouldReturnPostById() throws PostNotFoundByIdException {\n    // Arrange\n    Post post = new Post(UUID.randomUUID(), \"title1\", \"content1\", new Category(\"category1\"));\n    inventory.create(post); // add post to in-memory inventory\n    // Act\n    Post actual = sut.getById(post.getId());\n    // Assert\n    assertThat(actual).isEqualTo(post);\n}\n\n@Test\nvoid shouldThrowPostNotFoundByIdExceptionWhenGetByIdNotFoundId() {\n    // Arrange\n    UUID id = UUID.randomUUID();\n    // Act\n    Throwable thrown = catchThrowable(() =&gt; sut.getById(id));\n    // Assert\n    assertThat(thrown).isInstanceOf(PostNotFoundByIdException.class)\n            .hasMessage(\"Post with id \" + id + \" not found\", exception.getMessage());\n}\n</code></pre> <p>with <code>PostInMemoryInventory</code> being </p> <pre><code>public class PostInMemoryInventory implements PostInventory {\n    private final List&lt;Post&gt; posts;\n\n    public PostInMemoryInventory() {\n        this.posts = new ArrayList&lt;&gt;();\n    }\n\n    @Override\n    public Post create(Post post) {\n        if (post.getId() == null) {\n            post.setId(UUID.randomUUID());\n        }\n        this.posts.add(post);\n    }\n\n    @Override\n    public Optional&lt;Post&gt; findById(UUID id) {\n        return posts.stream()\n            .filter(post -&gt; post.getId().equals(id))\n            .findFirst();\n    }\n}\n</code></pre>"},{"location":"architecture/hexagonal/#unit-testing-the-architecture-with-archunit","title":"Unit testing the architecture with ArchUnit","text":"<p>In order to make sure that our domain doesn't communicate with external dependencies and doesn't rely on any framework, we can add the <code>archunit</code> to unit test our hexagonal architecture.</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.tngtech.archunit&lt;/groupId&gt;\n    &lt;artifactId&gt;archunit-junit5&lt;/artifactId&gt;\n    &lt;version&gt;${archunit.version}&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <p>And that way we can write our unit test for the architecture </p> <pre><code>package com.devt.blogger.domain;\n\nimport com.tngtech.archunit.junit.AnalyzeClasses;\nimport com.tngtech.archunit.junit.ArchTest;\nimport com.tngtech.archunit.lang.ArchRule;\n\nimport static com.tngtech.archunit.core.importer.ImportOption.DoNotIncludeTests;\nimport static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;\n\n@AnalyzeClasses(\n        packages = \"com.devt.blogger\",\n        importOptions = DoNotIncludeTests.class\n)\nclass DomainArchTest {\n\n    @ArchTest\n    static final ArchRule shouldNotDependsOnExternalClasses = classes()\n            .that()\n            .resideInAPackage(\"..domain..\")\n            .should()\n            .onlyDependOnClassesThat()\n            .resideInAnyPackage(\n                    \"com.devt.blogger.domain..\",\n                    \"java..\"\n            );\n\n}\n</code></pre>"},{"location":"architecture/hexagonal/#resources","title":"Resources","text":"<ul> <li>Traditional layer code : <code>blogger-hexagonal/traditional</code></li> <li>Hexagonal layer code : <code>blogger-hexagonal/hexagonal</code></li> <li>Article : Transforming a Traditional Spring Boot App into a Hexagonal Architecture</li> </ul>"},{"location":"architecture/togaf/foundation/unit1/","title":"Introduction and Concepts","text":"<p><code>Enterprise</code> is considered to be any collection of organizations that have common goals</p> <p><code>Enterprise Architecture</code> process of translating business vision and strategy into effective enterprise change by creating, communicating, and improving the key principles and models that describe the enterprise\u2019s future state and enable its evolution</p> <p>A good <code>Enterprise Architecture</code> facilitates effective governance, management, risk management, and exploitation opportunities</p>"},{"location":"architecture/togaf/foundation/unit1/#architecture-domains","title":"Architecture Domains","text":"<ul> <li><code>Business architecture</code> defines the business strategy, governance, organization, and key business processes</li> <li><code>Data architecture</code> describes the structure of an organization\u2019s logical and physical data assets and data management resources</li> <li><code>Application architecture</code> provides a blueprint for the individual applications to be deployed, their interactions, and their relationships to the core business processes of the organization</li> <li><code>Technology architecture</code> describes the digital architecture and the logical software and hardware infrastructure capabilities and standards that are required to support the deployment of business, data, and applications services</li> </ul>"},{"location":"architecture/togaf/foundation/unit1/#abstraction-levels","title":"Abstraction levels","text":"<ul> <li><code>Contextual</code> : understanding the environment in which an enterprise operates and the context in which architecture work is planned and executed. It answers why an enterprise undertakes architecture work, what is the scope of work, and the motivation in terms of goals, drivers, and objectives</li> <li><code>Conceptual</code> : decomposing the requirements to understand the problem, and what is needed to address the problem, without unduly focusing on how the architecture will be realized</li> <li><code>Logical</code> : Identifying the kinds of business, data, application, and technology components needed to achieve the services identified in the conceptual level. It is about identifying how an architecture can be organized and structured, in an implementation-independent fashion</li> <li><code>Physical</code> : The allocation and implementation of physical components to meet the identified logical components. It is about determining with what physical components the logical-level components can be realized</li> </ul>"},{"location":"architecture/togaf/foundation/unit1/#content-framework-overview","title":"Content Framework Overview","text":"<p>The content framework provides a structure for the deliverables that are produced during each phase of the ADM. </p> <p></p> <p>An <code>Enterprise Architecture Capability</code> is the ability to develop, use, and sustain the architecture of a particular enterprise, and use the architecture to govern change</p>"},{"location":"architecture/togaf/foundation/unit2/","title":"Definitions","text":"<p>Terminology : my-drive</p> <p>Glossary : togaf-glossary</p>"},{"location":"architecture/togaf/foundation/unit3/","title":"ADM Phases","text":"<p>The <code>ADM</code>, Architecture Development Method, is a detailed step by step process for developing or changing an enterprise architecture</p> <p></p>"},{"location":"architecture/togaf/foundation/unit3/#phases","title":"Phases","text":""},{"location":"architecture/togaf/foundation/unit3/#preliminary-phase","title":"Preliminary Phase","text":"<p>Determine the Architecture Capability desired by the organization:</p> <ul> <li>Review the organizational context for conducting Enterprise Architecture</li> <li>Identify and scope the elements of the enterprise organizations</li> <li>Identify the established frameworks, methods, and processes</li> <li>Establish Capability Maturity target</li> </ul> <p>Establish the Architecture Capability:</p> <ul> <li>Define and establish the Organizational Model</li> <li>Define and establish the detailed process and resources for Architecture Governance</li> <li>Select and implement tools that support the Architecture Capability</li> <li>Define the Architecture Principles</li> </ul> <p>Deliverables: </p> <ul> <li>Request for Architecture Work (Demande de mise en chantier d'architecture)</li> <li>Architecture Principles</li> </ul>"},{"location":"architecture/togaf/foundation/unit3/#phase-a-architecture-vision","title":"Phase A: Architecture Vision","text":"<ul> <li>Define the scope of the Architecture Project</li> <li>Identify stakeholders, concerns, and associated requirements</li> <li>Assess the capability of the Enterprise Architecture team</li> </ul> <p>Deliverables:</p> <ul> <li>Statement of Architecture Work (stakeholders need to agree on a summary of the target)</li> <li>Architecture Vision</li> </ul> <p>Phase B, C, &amp; D : A set of domain architectures approved by the stakeholders for the problem being addressed, with a set of gaps, and work to clear the gaps understood by the stakeholders (building blocks)</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-b-business-architecture","title":"Phase B: Business Architecture","text":"<p>Development of the target Business Architecture to support the agreed Architecture Vision and stakeholder concerns</p> <p>Workshop with the business to understand more the business requirements</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-c-information-systems-architecture","title":"Phase C: Information Systems Architecture","text":"<p>Development of the target Information Systems Architectures, describing how the enterprise\u2019s Information Systems </p> <p>Development of the Target Data Architecture that enables the Business Architecture and the Architecture Vision, in a way that addresses the Statement of Architecture Work and stakeholder concerns</p> <p>Divided into two domain:</p> <ul> <li>Data Architecture: Define data entities, relationships, data governance</li> <li>Application Architecture: Identify applications, their interactions, and alignment with business needs</li> </ul>"},{"location":"architecture/togaf/foundation/unit3/#phase-d-technology-architecture","title":"Phase D: Technology Architecture","text":"<p>Define the logical and physical technology infrastructure to support the agreed Architecture Vision</p> <p>Focus: Networks, platforms, services, and infrastructure technologies</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-e-opportunities-solutions","title":"Phase E: Opportunities &amp; Solutions","text":"<p>Generate the initial complete version of the Architecture Roadmap, based upon the gap analysis and candidate Architecture Roadmap components from Phases B, C, and D</p> <p>Determine whether an incremental approach is required, and if so identify Transition Architectures that will deliver continuous business value</p> <p>Define the overall Solution Building Blocks (SBBs) to finalize the Target Architecture based on the ABBs</p> <p>Dependency between the set of changes. (Work Package &amp; Gap dependency)</p> <p>Value, effort, and risk associated with each change and work package.</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-f-migration-planning","title":"Phase F: Migration Planning","text":"<p>Finalize the Architecture Roadmap and the supporting Implementation and Migration Plan</p> <p>Ensure that the Implementation and Migration Plan is co-ordinated with the enterprise\u2019s approach to managing and implementing change in the enterprise\u2019s overall change portfolio</p> <p>Ensure that the business value and cost of work packages and Transition Architectures is understood by key stakeholders</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-g-implementation-governance","title":"Phase G: Implementation Governance","text":"<p>Ensure conformance with the Target Architecture by Implementation Projects</p> <p>Perform appropriate Architecture Governance functions for the solution and any implementation-driven architecture Change Requests</p>"},{"location":"architecture/togaf/foundation/unit3/#phase-h-architecture-change-management","title":"Phase H: Architecture Change Management","text":"<p>Procedures for managing change to the new architecture</p> <ul> <li>Ensure that the architecture development cycle is maintained</li> <li>Ensure that the Architecture Governance framework is executed</li> <li>Ensure that the Enterprise Architecture Capability meets current requirements</li> </ul>"},{"location":"architecture/togaf/foundation/unit3/#requirements-management","title":"Requirements Management","text":"<p>Acts as a central repository and validation mechanism for all phases</p> <ul> <li>Ensure that the Requirements Management process is sustained and operates for all relevant ADM phases.</li> <li>Manage Architecture Requirements identified during any execution of the ADM cycle or a phase.</li> <li>Ensure that relevant Architecture Requirements are available for use by each phase as the phase is executed.</li> </ul>"},{"location":"architecture/togaf/foundation/unit3/#scope","title":"Scope","text":"<p>The scope of an architecture is first expressed in terms of <code>breadth</code>, <code>depth</code>, and <code>time</code></p> <ul> <li><code>Breadth</code>: what is the full extent of the enterprise, and what part of that extent will this architecting effort deal with?</li> <li><code>Depth</code>: to what level of detail should the architecting effort go?</li> <li><code>Time Period</code>: what is the time period that needs to be articulated for the Architecture Vision, and does it make sense for the same period to be covered in the detailed Architecture Description?</li> </ul>"},{"location":"architecture/togaf/foundation/unit4/","title":"ADM Techniques","text":"<p>Architecture Principles should address the following purposes:</p> <ul> <li>Enabling decision-making</li> <li>Aligning the enterprise</li> <li>Ensuring Governance</li> <li>Understanding Values and culture</li> </ul>"},{"location":"architecture/togaf/foundation/unit4/#architecture-principles-template","title":"Architecture Principles Template","text":"Element Description <code>Name</code> Should represent the essence of the rule, and be memorable  Should not mention specific technology platforms  Should avoid ambiguous words <code>Statement</code> Should succinctly and unambiguously communicate the fundamental rule <code>Rationale</code> Should highlight the business benefits of adhering to the principle, using business terminology  Should describe the relationship to other principles <code>Implications</code> Should highlight the requirements for the business and for IT for carrying out the principle  Should state the business impact and consequences of adopting the principle"},{"location":"architecture/togaf/foundation/unit4/#qualities-of-architecture-principles","title":"Qualities of Architecture Principles","text":""},{"location":"architecture/togaf/foundation/unit4/#understandable","title":"Understandable","text":"<p>The underlying tenets can be quickly grasped and understood by individuals throughout the organization.</p> <p>The intention of the principle is clear and unambiguous, so that violations, whether intentional or not, are minimized</p>"},{"location":"architecture/togaf/foundation/unit4/#robust","title":"Robust","text":"<p>Enable good quality decisions about architectures and plans to be made, and enforceable policies and standards to be created. </p> <p>Each principle should be sufficiently definitive and precise to support consistent decision-making in complex, potentially controversial situations</p>"},{"location":"architecture/togaf/foundation/unit4/#complete","title":"Complete","text":"<p>Every potentially important principle governing the management of information and technology for the organization is defined \u2014 the principles cover every situation perceived</p>"},{"location":"architecture/togaf/foundation/unit4/#consistent","title":"Consistent","text":"<p>Strict adherence to one principle may require a loose interpretation of another principle. </p> <p>The set of principles must be expressed in a way that allows a balance of interpretations. </p> <p>Principles should not be contradictory to the point where adhering to one principle would violate the spirit of another. </p> <p>Every word in a principle statement should be carefully chosen to allow consistent yet flexible interpretation</p>"},{"location":"architecture/togaf/foundation/unit4/#stable","title":"Stable","text":"<p>Principles should be enduring, yet able to accommodate changes.</p> <p>An amendment process should be established for adding, removing, or altering principles after they are ratified initially.</p>"},{"location":"architecture/togaf/foundation/unit4/#business-scenarios","title":"Business Scenarios","text":"<p>A method used to help identify and understand the business requirements that an architecture must address</p>"},{"location":"architecture/togaf/foundation/unit5/","title":"Applying the ADM","text":""},{"location":"architecture/togaf/foundation/unit5/#architecture-landscape","title":"Architecture Landscape","text":"<p>The architectural representation of assets in use, or planned, by the enterprise at particular points in time.</p> <p></p> <ul> <li>Breadth: The subject matter covered by an Architecture Project </li> <li>Level of Detail: The level of detail should be self-explanatory</li> <li>Time: Every architecture development project will have a planning horizon; the point in time when you expect to reach the Target Architecture</li> </ul>"},{"location":"architecture/togaf/foundation/unit5/#levels","title":"Levels","text":"Level Description Strategic Architecture provides an organizing framework for operational and change activity and allows for direction setting at an executive level Segment Architecture provides an organizing framework for operational and change activity and allows for direction setting and the development of effective Architecture Roadmaps at a program or portfolio level Capability Architecture provides an organizing framework for change activity and the development of effective Architecture Roadmaps realizing capability increments"},{"location":"architecture/togaf/foundation/unit5/#four-purposes-to-frame-architecture-projects","title":"Four Purposes to Frame Architecture Projects","text":"<ul> <li>Enterprise Architecture to Support Strategy: Deliver Enterprise Architecture to provide an end-to-end Target Architecture, and develop roadmaps of change over a three to ten-year period</li> <li>Enterprise Architecture to Support Portfolio: Deliver Enterprise Architecture to support cross-functional, multi-phase, and multi-project change initiatives</li> <li>Enterprise Architecture to Support Project: Deliver Enterprise Architecture to support the enterprise\u2019s project delivery method</li> <li>Enterprise Architecture to Support Solution Delivery: Deliver Enterprise Architecture that is used to support the solution deployment</li> </ul>"},{"location":"architecture/togaf/foundation/unit6/","title":"Architecture Governance","text":"<p>Governance is a decision-making process with a defined structure of relationships to direct and control the enterprise to achieve stated goals.</p> <p>Architecture Governance typically operates within a hierarchy of governance structures which can include all of the following as distinct domains with their own disciplines and processes:</p> <ul> <li>Corporate Governance</li> <li>Technology Governance</li> <li>IT Governance</li> <li>Architecture Governance</li> </ul>"},{"location":"architecture/togaf/foundation/unit6/#benefits-of-architecture-governance","title":"Benefits of Architecture Governance","text":"<ul> <li><code>Discipline</code> \u2013 All involved parties will have a commitment to adhere to procedures, processes, and authority structures established by the organization</li> <li><code>Transparency</code> \u2013 All actions implemented and their decision support will be available for inspection by authorized organization and provider parties</li> <li><code>Independence</code> \u2013 All processes, decision-making, and mechanisms used will be established so as to minimize or avoid potential conflicts of interest</li> <li><code>Accountability</code> \u2013 Identifiable groups within the organization \u2013 e.g., governance boards who take actions or make decisions \u2013 are authorized and accountable for their actions</li> <li><code>Responsibility</code> \u2013 Each contracted party is required to act responsibly to the organization and its stakeholders</li> <li><code>Fairness</code> \u2013 All decisions taken, processes used, and their implementation will not be allowed to create unfair advantage to any one particular party</li> </ul>"},{"location":"architecture/togaf/foundation/unit7/","title":"Architecture Content","text":""},{"location":"architecture/togaf/foundation/unit7/#stakeholders","title":"Stakeholders","text":"<p><code>Stakeholders</code> are individuals, teams, organizations, or classes thereof, having an interest in a system. They are people who have key roles in, or concerns about, the system; for example, users, developers, etc.</p>"},{"location":"architecture/togaf/foundation/unit7/#concerns","title":"Concerns","text":"<p><code>Concerns</code> are interests in a system relevant to one or more of its stakeholders. They may pertain to any aspect of the system\u2019s functioning, development, or operation, including performance, reliability, security, distribution, and evolvability, and may determine acceptability of the system</p>"},{"location":"architecture/togaf/foundation/unit7/#architecture-view","title":"Architecture View","text":"<p>An <code>Architecture View</code> is a representation of a system from the perspective of a related set of concerns.  An architect creates architecture models. An architecture view consists of parts of these, chosen to show stakeholders that their concerns are being met.</p>"},{"location":"architecture/togaf/foundation/unit7/#architecture-viewpoint","title":"Architecture Viewpoint","text":"<p>An <code>Architecture Viewpoint</code> defines the perspective from which an architecture view is taken.  It defines how to construct and use an architecture view, the information needed, the modeling techniques for expressing and analyzing it, and a rationale for these choices (e.g., by describing the purpose and intended audience of the view). </p>"},{"location":"architecture/togaf/foundation/unit7/#building-blocks","title":"Building blocks","text":"<p>Systems are built from collections of building blocks. They can be defined at many levels of detail: Groupings at the fundamental functional level capturing architecture requirements are known as Architecture Building Blocks (ABBs) Real products that can be procured or specific custom developments are known as Solution Building Blocks (SBBs)</p>"},{"location":"architecture/togaf/practitioner/unit1/","title":"Context for Enterprise Architecture","text":"<p>An Enterprise Architecture (EA) is developed for one simple reason: to guide effective change.</p> <p>An EA Capability is the ability to develop, use, and sustain the architecture of a particular enterprise, and use the architecture to govern change.</p> <p>The Enterprise Architect and implementer are directed, and both are controlled by the stakeholder.</p> <p>An Architecture Compliance review is a scrutiny of the compliance of a specific project against established architectural criteria, spirit, and business objectives. A formal process for such reviews normally forms the core of an <code>Enterprise Architecture Compliance strategy</code> (Deliverable).</p> <p>Agile development aligns with ADM Phase G, Implementation Governance</p> <p>Architecture will have a set of constraints that limit the choices of the Agile team \u2014 often termed as guardrails</p> <p>The Practitioner needs to act as the stakeholder\u2019s agent.</p> <p>An Enterprise Security Architecture does not exist in isolation.</p> <p>Risk is the effect that uncertainty has on the achievement of business objectives.</p> <p>The objective of risk management is to optimize business outcomes to maximize business value and minimize business losses.</p>"},{"location":"architecture/togaf/practitioner/unit2/","title":"Stakeholder Management","text":"<p><code>Stakeholder</code>: someone who has approval rights in the Target Architecture being explored by the current Architecture Project, and subsequently has decision rights to the suitability of the implementation</p> <p><code>Concern</code>: a consistent set of subjects that capture the stakeholder\u2019s interests and act to consolidate requirements</p> <p><code>View</code>: a representation of the EA Landscape that addresses a set of stakeholder\u2019s concerns; either describe how the architecture addresses the concerns or demonstrate how the associated requirements are met</p> <p>They typically perform several roles: they will act as Subject Matter Experts (SMEs) and agents for their stakeholders in addition to developing architecture.</p> <p>As an SME, the Practitioner is a source of expert advice. As an agent, the Practitioner may speak on behalf of a stakeholder.</p>"},{"location":"architecture/togaf/practitioner/unit3/","title":"Phase A, the Starting Point","text":""},{"location":"architecture/togaf/practitioner/unit3/#key-steps-to-identify-information","title":"Key Steps to Identify Information","text":""},{"location":"architecture/togaf/practitioner/unit3/#identify-stakeholders-concerns-and-business-requirements","title":"Identify stakeholders, concerns, and business requirements","text":"<p>Explore the EA Repository for superior architecture constraints and guidance. Do the Stakeholder Map. Be completely clear which stakeholders must be served and what they are worrying about.</p>"},{"location":"architecture/togaf/practitioner/unit3/#define-scope","title":"Define scope","text":"<p>What problem are you solving? In terms of the EA Landscape (breadth and planning-horizon) and in terms of purpose, which will tend to confirm the necessary level of detail? Be completely clear where in the business cycle this architecture will be used.</p>"},{"location":"architecture/togaf/practitioner/unit3/#evaluate-capabilities","title":"Evaluate capabilities","text":"<p>Take a hard look at the EA team and confirm the ability of the team to deliver on this architecture development project. A good EA team covers gaps in experience, skill, and bias to deliver the architecture that is useful, overcoming weaknesses of few members of the team.</p>"},{"location":"architecture/togaf/practitioner/unit3/#phase-a-recommended-steps","title":"Phase A, recommended steps","text":"<ul> <li>Establish the architecture project </li> <li>Identify stakeholders, concerns, and business requirements </li> <li>Confirm and elaborate business goals, business drivers, and constraints</li> <li>Evaluate capabilities</li> <li>Assess readiness for business transformation</li> <li>Define scope</li> <li>Confirm and elaborate Architecture Principles, including business principles</li> <li>Develop Architecture Vision </li> <li>Define the Target Architecture value propositions and KPIs </li> <li>Identify the business transformation risks and mitigation activities</li> <li>Develop Statement of Architecture Work; secure approval</li> </ul>"},{"location":"architecture/togaf/practitioner/unit3/#phase-a-recommended-outputs","title":"Phase A, recommended outputs","text":"<ul> <li>Approved Statement of Architecture Work</li> <li>Refined statements of business principles, business goals, and business drivers</li> <li>Architecture Principles</li> <li>Capability Assessment</li> <li>Tailored Architecture Framework</li> <li>Architecture Vision</li> <li>Draft Architecture Definition Document</li> <li>Communications Plan</li> <li>Additional content populating the Architecture Repository</li> </ul>"},{"location":"architecture/togaf/practitioner/unit4/","title":"Architecture Development","text":"<p>The steps to develop architecture in Phases B, C, and D are identical, because the approach to developing an architecture, confirming the work product developed fits, and confirming approval are identical.</p>"},{"location":"architecture/togaf/practitioner/unit6/","title":"Architecture Change Management","text":"<p>Phase H requires the Practitioner to identify:</p> <ul> <li>Bottom-up drivers for change</li> <li>Change due to improvements in available technologies or conditions controlling the operations or environment of the Enterprise</li> </ul> <p>Then initiate the architecture work for the next target transition state (top-down driver)</p>"},{"location":"architecture/togaf/practitioner/unit6/#architecture-change-management-steps","title":"Architecture Change Management Steps","text":"<ul> <li>Establish value realization</li> <li>Deploy monitoring tools</li> <li>Manage risks</li> <li>Provide analysis for architecture change management</li> <li>Develop change requirements to meet performance targets </li> <li>Manage governance process </li> <li>Activate the process to implement change</li> </ul>"},{"location":"architecture/togaf/practitioner/unit7/","title":"Requirements Management","text":"<p>Effective requirements management is dependent upon clear traceability from the organization\u2019s vision, mission, business model, and strategies through the most detailed statement of requirement.</p> <p>Objectives of the Requirements Management Phase:</p> <ul> <li>Ensure that the Requirements Management process is sustained and operates for all relevant ADM phases</li> <li>Manage architecture requirements identified during any execution of the ADM cycle or a phase</li> <li>Ensure that relevant architecture requirements are available for use by each phase as the phase is executed</li> </ul>"},{"location":"architecture/togaf/practitioner/unit7/#requirements-impact-assessment","title":"Requirements Impact Assessment","text":"<p>Throughout the ADM, new information is collected relating to an architecture, new facts may come to light that invalidate existing aspects of the architecture.</p> <p>A Requirements Impact Assessment assesses the current architecture requirements and specification to identify changes that should be made and the implications of those changes.</p>"},{"location":"architecture/togaf/practitioner/unit7/#architecture-requirements-specification","title":"Architecture Requirements Specification","text":"<ul> <li>Provides a set of quantitative statements that outline what an implementation project must do in order to comply with the architecture</li> <li>Will typically form a major component of an implementation contract or contract for more detailed Architecture Definition</li> </ul> <p>When new requirements arise, or existing ones are changed, a Requirements Impact Statement is generated, which identifies the phases of the ADM that need to be revisited to address the changes.</p> <p>The statement goes through various iterations until the final version, which includes the full implications of the requirements (e.g., costs, timescales, and business metrics) on the architecture development.</p> <p>Once requirements for the current ADM cycle have been finalized then the Architecture Requirements Specification should be updated.</p>"},{"location":"tech/tech-debt/","title":"Tech debt &amp; refactoring","text":"<p>Allocate time for tech debt &amp; refactoring </p> <p>if you don't schedule refactoring your bugs will do it for you </p> <ol> <li> <p>Tech debt is inevitable but manageable -&gt; every sprint adds complexity. Regular cleanup is survival</p> </li> <li> <p>Refactoring isn't extra work, it's product work -&gt; it improves speed, stability and morale</p> </li> <li> <p>Make it visible -&gt; track debt items like features, include them in planning</p> </li> <li> <p>Use boy scout rule -&gt; leave the code cleaner than you found it</p> </li> <li> <p>Even 10% of each sprint helps -&gt; small investments = big dividends over time</p> </li> </ol>"},{"location":"tech/backend/aaa/","title":"Structure unit tests","text":"<p>The <code>AAA</code> patterns provides a simple structure for all tests. It advocates for splitting each test into three parts:</p> <ul> <li><code>arrange</code> : bring the <code>SUT</code> (system under test aka the class you are testing) and its dependencies to a desired states</li> <li><code>act</code> : calls the method, pass the prepared dependencies and capture the output value (if any)</li> <li><code>assert</code> : verify the outcome</li> </ul> <p>Once u get used to the uniformity of this pattern, it will help you to easily read and understand any test.</p> <p><code>Given</code>-<code>When</code>-<code>Then</code> pattern is similar to <code>AAA</code> pattern, it advocates to break down tests into similar 3 parts: </p> <ul> <li><code>Given</code> corresponds to the <code>arrange</code> section</li> <li><code>When</code> corresponds to the <code>act</code> section</li> <li><code>Then</code> corresponds to the <code>assert</code> section</li> </ul> <p>The only distinction is that the <code>Given</code>-<code>When</code>-<code>Then</code> structure is more readable to non-programmers.</p>"},{"location":"tech/backend/aaa/#guidelines","title":"Guidelines","text":"<ul> <li>avoid multiple <code>arrange</code>/<code>act</code>/<code>assert</code> sections </li> <li>distinguish the SUT in tests by naming it <code>sut</code></li> <li>differentiate the three test sections either by putting Arrange, Act, and Assert comments before them or by introducing empty lines between these sections</li> <li><code>act</code> section is normally a single line code</li> <li>avoid if statements in tests</li> </ul>"},{"location":"tech/backend/api-guidelines/","title":"API Conventions","text":""},{"location":"tech/backend/api-guidelines/#http-request-methods","title":"HTTP request methods","text":"Method Description <code>GET</code> Retrieve data (should not modify data) <code>POST</code> Create a new resource <code>PUT</code> Modify/Update an existing resource <code>PATCH</code> Modify part of an existing resource <code>DELETE</code> Delete an existing resources"},{"location":"tech/backend/api-guidelines/#best-practices","title":"Best practices","text":""},{"location":"tech/backend/api-guidelines/#plural-nouns","title":"Plural nouns","text":"<p>It helps ensure consistency and better reflects the possibility of the endpoint returning multiple resources</p> <p>\u26d4 <code>GET /category</code> \u2705 <code>GET /categories</code></p> <p>\u26d4 <code>GET /user</code> \u2705 <code>GET /users</code></p>"},{"location":"tech/backend/api-guidelines/#separate-words-with-hyphens","title":"Separate words with hyphens","text":"<p>Use hyphens <code>-</code> to improve the readability of URIs, do not use underscores <code>_</code></p> <p>\u26d4 <code>GET /managed_devices</code> \u2705 <code>GET /managed-devices</code></p> <p>\u26d4 <code>GET /myFolders</code> \u2705 <code>GET /my-folders</code></p>"},{"location":"tech/backend/api-guidelines/#use-lowercase-letters","title":"Use lowercase letters","text":"<p>Lowercase letters should be consistently preferred in URI paths</p> <p>\u26d4 <code>GET /Categories</code> \u2705 <code>GET /categories</code></p> <p>\u26d4 <code>GET /USERS</code> \u2705 <code>GET /users</code></p>"},{"location":"tech/backend/api-guidelines/#use-path-variables-for-singleton-resource","title":"Use path variables for singleton resource","text":"<pre><code>GET /categories\n</code></pre> <p>will return a collection of resource categories</p> <pre><code>GET /categories/{id}\n</code></pre> <p>will return a singleton resource a category</p>"},{"location":"tech/backend/api-guidelines/#use-query-param-to-filter-a-collection","title":"Use query param to filter a collection","text":"<p>\u26d4 <code>GET /categories/search-by-name/{name}</code> \u2705 <code>GET /categories?name={name}</code></p> <p>\u26d4 <code>GET /users/username/{username}</code> \u2705 <code>GET /users?username={username}</code></p>"},{"location":"tech/backend/api-guidelines/#sub-resources","title":"Sub resources","text":"<pre><code>GET /categories/{id}/posts\n</code></pre> <p>will return the list of posts per a category</p> <pre><code>GET /posts/{id}/categories\n</code></pre> <p>will return the list of categories per a post</p>"},{"location":"tech/backend/api-guidelines/#version-your-endpoints","title":"Version your endpoints","text":"<p>Helps to easily manage changes and updates to an API while still maintaining backward compatibility</p> <pre><code>GET /v1/categories\n</code></pre> <pre><code>GET /v2/categories\n</code></pre>"},{"location":"tech/backend/api-guidelines/#do-not-use-verbs-in-the-uri","title":"Do not use verbs in the URI","text":"<p>HTTP methods (GET, POST, PUT, DELETE, etc.) are used to perform actions on those resources, effectively acting as verbs</p> <p>\u26d4 <code>POST /v1/categories/create</code> \u2705 <code>POST /v1/categories</code></p> <p>\u26d4 <code>POST /v1/categories/update</code> \u2705 <code>PUT /v1/categories</code></p>"},{"location":"tech/backend/api-guidelines/#use-cases","title":"Use Cases","text":"Endpoint Use Case <code>GET /v1/categories</code> Get all categories <code>GET /v1/categories/{id}</code> Get category by id <code>GET /v1/categories/{id}/posts</code> Get all post of a certain categories <code>GET /v1/posts?date=20-01-2024</code> Search posts by created date <code>POST /v1/categories</code> Create a new category <code>PUT /v1/categories/{id}</code> Update an existing category <code>PATCH /v1/categories/{id}</code> Update a sub property of an existing category <code>DELETE /v1/categories/{id}</code> Delete an existing category by id"},{"location":"tech/backend/api-guidelines/#http-status-code","title":"HTTP Status Code","text":"<p>HTTP defines these standard status codes that can be used to convey the results of a client\u2019s requests. They are divided into five categories</p> Status Description <code>1xx</code> Informational <code>2xx</code> Success <code>3xx</code> Redirection <code>4xx</code> Client error <code>5xx</code> Server error <p>Here are the most common HTTP status codes </p> Status Description <code>200</code> Ok Request was successful <code>201</code> Created Request was successful and a new resource was created <code>400</code> Bad request Server couldn\u2019t process the request to a client error <code>500</code> Internal server error Server encountered an unexpected exception <code>403</code> Forbidden User don\u2019t have the permissions to access the resource <code>404</code> Not found Resource not found <code>503</code> Service unavailable Server not able to handle requests"},{"location":"tech/backend/arch-unit/","title":"ArchUnit with JUnit 5","text":"<p>ArchUnit is a Java library that allows you to define and enforce architectural rules, such as package dependencies, naming conventions, and layer boundaries, using unit tests.</p> <p>This helps maintain a clean architecture and prevents unwanted dependencies from creeping into your codebase. It also catch architectural violations early in the development process.</p>"},{"location":"tech/backend/arch-unit/#getting-started","title":"Getting Started","text":""},{"location":"tech/backend/arch-unit/#add-dependency","title":"Add Dependency","text":"<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.tngtech.archunit&lt;/groupId&gt;\n  &lt;artifactId&gt;archunit-junit5&lt;/artifactId&gt;\n  &lt;version&gt;1.4.1&lt;/version&gt;\n  &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"tech/backend/arch-unit/#example-of-usage-of-arch-unit","title":"Example of usage of Arch Unit","text":""},{"location":"tech/backend/arch-unit/#ensuring-your-domain-do-not-depends-on-external-classes","title":"Ensuring your domain do not depends on external classes","text":"<p>This rule ensures that classes in your <code>domain</code> package only depend on other domain classes or JDK classes, enforcing a clean domain model.</p> <pre><code>@AnalyzeClasses(\n    packages = \"com.socgen.mycontrols\",\n    importOptions = DoNotIncludeTests.class\n)\nclass DomainArchTest {\n\n    @ArchTest\n    static final ArchRule domainShouldNotDependOnExternalClasses = classes()\n        .that().resideInAPackage(\"..domain..\")\n        .should().onlyDependOnClassesThat().resideInAPackage(\n            \"com.socgen.mycontrols.domain..\",\n            \"java..\"\n        );\n}\n</code></pre>"},{"location":"tech/backend/arch-unit/#ensuring-a-package-only-contains-interfaces","title":"Ensuring a package only contains interfaces","text":"<p>This rule enforces that all classes in the <code>domain.inbound</code> package are interfaces, which is useful for defining ports in a hexagonal architecture.</p> <pre><code>@AnalyzeClasses(\n    packages = \"com.socgen.mycontrols\",\n    importOptions = DoNotIncludeTests.class\n)\nclass DomainArchTest {\n\n    @ArchTest\n    static final ArchRule inboundShouldOnlyBeInterfaces = classes()\n        .that().resideInAPackage(\"..domain.inbound..\")\n        .should().beInterfaces();\n}\n</code></pre>"},{"location":"tech/backend/arch-unit/#ensuring-all-classes-are-annotated-under-a-package-and-have-a-name","title":"Ensuring all classes are annotated under a package and have a name","text":"<p>This rule checks that all classes in the <code>domain.usecases</code> package are annotated with <code>@UseCase</code> and their names end with <code>UseCase</code>.</p> <pre><code>@AnalyzeClasses(\n    packages = \"com.socgen.mycontrols\",\n    importOptions = DoNotIncludeTests.class\n)\nclass DomainArchTest {\n\n    @ArchTest\n    static final ArchRule useCasesShouldBeAnnotatedAndShouldHaveUseCaseAtTheEndAsName = classes()\n        .that().resideInAPackage(\"..domain.usecases..\")\n        .should().beAnnotatedWith(UseCase.class)\n        .andShould().haveSimpleNameEndingWith(\"UseCase\");\n}\n</code></pre>"},{"location":"tech/backend/arch-unit/#resources","title":"Resources","text":"<ul> <li>ArchUnit Official Documentation</li> <li>ArchUnit Examples on GitHub</li> </ul>"},{"location":"tech/backend/java-25/","title":"Java 25","text":"<p>Java 25 is a Long-Term Support (LTS) release and has been made generally available on 16 September 2025.</p> <p>Here are some features</p>"},{"location":"tech/backend/java-25/#flexible-constructor-bodies","title":"Flexible Constructor Bodies","text":"<p>Allows code before the <code>super(...)</code> or <code>this(...)</code> call in constructors.</p> <p>Enables validation or computations before delegation to the superclass constructor.</p>"},{"location":"tech/backend/java-25/#before","title":"Before","text":"<pre><code>public class Elephant extends Animal {\n\n    public Elephant(String name) {\n        super(validate(name));\n    }\n\n    private static String validate(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException();\n        }\n        return name;\n    }\n}\n</code></pre>"},{"location":"tech/backend/java-25/#after","title":"After","text":"<pre><code>public class Elephant extends Animal {\n\n    public Elephant(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException();\n        }\n        super(name);\n    }\n}\n</code></pre>"},{"location":"tech/backend/java-25/#primitive-types-in-patterns","title":"Primitive Types in Patterns","text":"<p>Pattern matching can handle primitive types in switch and instanceof statements.</p>"},{"location":"tech/backend/java-25/#instanceof","title":"<code>instanceof</code>","text":""},{"location":"tech/backend/java-25/#before_1","title":"Before","text":"<pre><code>Object o = 42;\n\nif (o instanceof Integer i) {   // autoboxed to Integer\n    System.out.println(\"Integer with value: \" + i);\n} else {\n    System.out.println(\"Not an Integer\");\n}\n</code></pre> <p>You could not write <code>if (o instanceof int i)</code></p> <p>The only option was to rely on wrapper classes (<code>Integer</code>, <code>Double</code>, etc.), because <code>instanceof</code> only worked with reference types.</p>"},{"location":"tech/backend/java-25/#after_1","title":"After","text":"<p>Now, <code>instanceof</code> supports primitive patterns:</p> <pre><code>Object o = 42;\nif (o instanceof int i) {   // primitive pattern\n    System.out.println(\"Primitive int with value: \" + i);\n} else {\n    System.out.println(\"Not an int\");\n}\n</code></pre>"},{"location":"tech/backend/java-25/#switch","title":"<code>switch</code>","text":""},{"location":"tech/backend/java-25/#before_2","title":"Before","text":"<p>If you had a primitive like <code>int x = 42;</code>, and passed it as <code>Object o = x;</code>, then autoboxing turned it into an Integer, and the pattern <code>case Integer i</code> matched.</p> <p>You could not directly write <code>case int i</code> or use primitive patterns in <code>switch</code>.</p> <pre><code>public String test(Object obj) {\n    return switch (obj) {\n        case String s -&gt; \"String: \" + s;\n        case Integer i -&gt; \"Integer: \" + i;\n        default -&gt; \"Other: \" + obj;\n    };\n}\n</code></pre>"},{"location":"tech/backend/java-25/#after_2","title":"After","text":"<p>You can now use patterns like <code>int</code>, <code>long</code>, <code>double</code>, etc. directly</p> <pre><code>public String test(Object obj) {\n    return switch (obj) {\n        case int i    -&gt; \"int: \" + i;\n        case long l   -&gt; \"long: \" + l;\n        case double d -&gt; \"double: \" + d;\n        default       -&gt; \"Other: \" + obj;\n    };\n}\n</code></pre>"},{"location":"tech/backend/java-25/#compact-source-files-and-instance-main-methods","title":"Compact Source Files and Instance Main Methods","text":""},{"location":"tech/backend/java-25/#before_3","title":"Before","text":"<pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, world!\");\n    }\n}\n</code></pre>"},{"location":"tech/backend/java-25/#after_3","title":"After","text":"<pre><code>void main() {\n    System.out.println(\"Hello, world!\");\n}\n</code></pre> <p>No need for <code>public class</code>, <code>public static void main</code>, etc. \u2192 easier for small programs, teaching, scripting.</p>"},{"location":"tech/backend/java-25/#module-import","title":"Module import","text":""},{"location":"tech/backend/java-25/#before_4","title":"Before","text":"<pre><code>import java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        List&lt;String&gt; list = List.of(\"a\", \"b\");\n        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n    }\n}\n\n</code></pre>"},{"location":"tech/backend/java-25/#after_4","title":"After","text":"<pre><code>import module java.util;\n\nvoid main() {\n    var list = List.of(\"a\", \"b\");\n    var map  = new HashMap&lt;String, Integer&gt;();\n}\n</code></pre> <p>Instead of importing every class or package, you can pull in the whole module (<code>java.util</code> in this case).</p> <p>Cleaner for quick apps and educational snippets.</p>"},{"location":"tech/backend/java-25/#scoped-values","title":"Scoped Values","text":"<p>Scoped values are a lightweight and safe alternative to thread-locals.</p>"},{"location":"tech/backend/java-25/#before_5","title":"Before","text":"<pre><code>static final ThreadLocal&lt;String&gt; USER = new ThreadLocal&lt;&gt;();\n\npublic static void main(String[] args) {\n    USER.set(\"John\");\n    doWork();\n    USER.remove();\n}\n\nstatic void doWork() {\n    System.out.println(\"Working as \" + USER.get());\n}\n</code></pre> <p>Issues: manual set/remove, risk of memory leaks, not structured.</p>"},{"location":"tech/backend/java-25/#after_5","title":"After","text":"<pre><code>import java.lang.ScopedValue;\n\npublic class Example {\n    static final ScopedValue&lt;String&gt; USER = ScopedValue.newInstance();\n\n    public static void main(String[] args) {\n        ScopedValue.where(USER, \"Alice\").run(() -&gt; {\n            doWork();\n        });\n    }\n\n    static void doWork() {\n        System.out.println(\"Working as \" + USER.get());\n    }\n}\n</code></pre> <ul> <li>No risk of accidental value leakage across threads.</li> <li>Automatically bound to the structured scope.</li> <li>Plays nicely with virtual threads.</li> </ul>"},{"location":"tech/backend/java-25/#other","title":"Other","text":"<ul> <li>Compact Object Headers : the header size is reduced -&gt; more efficient memory usage</li> <li>GC / Startup / Profiling : Previous versions required extra flags and tools for performance tuning and observability. Java 25 improves this with faster startup times</li> <li>Crypto Updates : modernized cryptography libraries</li> </ul>"},{"location":"tech/backend/java-stream-intellij/","title":"Debugging a Java stream in IntelliJ","text":"<p>I just discovered a useful debugging feature that might help you one day!</p> <p>In IntelliJ, you can debug a stream by setting a breakpoint on it and then clicking \u2018Trace Current Stream Chain\u2019 to visualize the flow.</p> <p>For example, let\u2019s say we have the following Java code:</p> <pre><code>import java.util.stream.Stream;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Stream.of(\n                        \"camelCase\",\n                        \"PascalCase\",\n                        \"snake_case\",\n                        \"\",\n                        \"kebab-case\",\n                        \"UPPERCASE\"\n                )\n                .filter(s -&gt; !s.isBlank())\n                .map(String::toUpperCase)\n                .forEach(System.out::println);\n    }\n}\n</code></pre> <p>By clicking \u2018Trace Current Stream Chain\u2019 </p> <p></p> <p>We can have a split mode of each step </p> <p></p> <p>Or we can have a global flat mode</p> <p></p>"},{"location":"tech/devops/helm/","title":"HELM","text":"<p><code>HELM</code> is a package manager for <code>Kubernetes</code>. It simplifies deploying, upgrading and managing <code>Kubernetes</code> application.</p>"},{"location":"tech/devops/helm/#main-concepts","title":"Main concepts","text":"<p><code>Chart</code> contains all the <code>Kubernetes</code> manifests needed to deploy an app.</p> <p>Structure of a chart:</p> <ul> <li><code>Chart.yaml</code> : metadata (name, version, description)</li> <li><code>values.yaml</code> : default configuration values</li> <li><code>templates/</code> : parameterized <code>Kubernetes</code> YAML files</li> </ul> <p><code>HELM</code> uses Go templating <code>{{ ... }}</code> to generate <code>Kubernetes</code> manifests dynamically.</p>"},{"location":"tech/devops/helm/#getting-started","title":"Getting started","text":""},{"location":"tech/devops/helm/#1-install-helm-cli","title":"1. Install <code>HELM</code> cli","text":""},{"location":"tech/devops/helm/#2-setup-helm-charts-in-a-project-with-the-command-helm-create","title":"2. Setup <code>HELM</code> charts in a project with the command <code>helm create</code>","text":"<p>This command creates a chart directory along with the common files and directories used in a chart.</p> <p>For example :</p> <pre><code>helm create devops/helm\n</code></pre> <p>It will create a directory structure that looks something like this:</p> <pre><code>devops/helm\n\u251c\u2500\u2500 .helmignore    # Contains patterns to ignore when packaging Helm charts.\n\u251c\u2500\u2500 Chart.yaml     # Information about your chart\n\u251c\u2500\u2500 values.yaml    # The default values for your templates\n\u251c\u2500\u2500 charts/        # Charts that this chart depends on\n\u2514\u2500\u2500 templates/     # The template files\n    \u2514\u2500\u2500 tests/     # The test files\n</code></pre>"},{"location":"tech/devops/helm/#3-setup-your-templates","title":"3. Setup your templates","text":"<p>Define your <code>Kubernetes</code> manifests in the <code>HELM</code> chart that you have just created.</p> <p>So under <code>devops/helm</code> (our previous created chart), you will define under <code>/templates/</code> the manifests :</p> <ul> <li><code>deployment.yaml</code></li> <li><code>service.yaml</code></li> <li><code>ingress.yaml</code></li> <li>...</li> </ul> <p>Let's take an example of a manifest : <code>deployment.yaml</code></p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ .Values.app }}-{{ .Values.env }}\n  labels:\n    app.kubernetes.io/name: {{ .Values.app }}-{{ .Values.env }}\n    app.kubernetes.io/component: {{ .Values.app }}-{{ .Values.env }}\n    environment: {{ .Values.env }}\nspec:\n  replicas: {{ .Values.replicas }}\n  selector:\n    matchLabels:\n    app.kubernetes.io/name: {{ .Values.app }}-{{ .Values.env }}\n    app.kubernetes.io/component: {{ .Values.app }}-{{ .Values.env }}\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: {{ .Values.app }}-{{ .Values.env }}\n        app.kubernetes.io/component: {{ .Values.app }}-{{ .Values.env }}\n        environment: {{ .Values.env }}\n    spec:\n      containers:\n        - image: https://hub.docker.com/my-namespace/{{ .Values.app }}:{{ .Values.tag }}\n          imagePullPolicy: Always\n          name : {{ .Values.app }}-{{ .Values.env }}-cn\n          resources:\n            limits:\n              cpu: {{ .Values.resources.limits.cpu }}\n              memory: {{ .Values.resources.limits.memory }}\n            requests:\n              cpu: {{ .Values.resources.requests.cpu }}\n              memory: {{ .Values.resources.requests.memory }}\n            # ... simplified for documentation purpose\n        {{- if .Values.filebeat.enabled }}\n        - image: https://hub.docker.com/elastic/filebeat:8.19.2\n          imagePullPolicy: Always\n          name : {{ .Values.app }}-{{ .Values.env }}-filebeat-cn\n          resources:\n            limits:\n              cpu: 20m\n              memory: 200Mi\n            requests:\n              cpu: 5m\n              memory: 200Mi\n            # ... simplified for documentation purpose\n        {{- end }}\n</code></pre>"},{"location":"tech/devops/helm/#4-configuration-via-valuesyaml","title":"4. Configuration via <code>values.yaml</code>","text":"<p>The <code>values.yaml</code> file allows you to centralize and override configurations without editing your template files directly.</p> <p>Here is an example of a <code>values.yaml</code> for the app <code>audit</code></p> <ul> <li><code>HOMOL</code> environment values : <code>/audit/devops/homol/values.yaml</code></li> </ul> <pre><code>app: audit\nenv: homol\nreplicas: 1\n\nresources:\n  limits:\n    cpu: 200m\n    memory: 200Mi\n  requests:\n    cpu: 50m\n    memory: 200Mi\n\nfilebeat:\n  enabled: false\n</code></pre> <ul> <li><code>PROD</code> environment values : <code>/audit/devops/prod/values.yaml</code></li> </ul> <pre><code>app: audit\nenv: prod\nreplicas: 2\n\nresources:\n  limits:\n    cpu: 500m\n    memory: 500Mi\n  requests:\n    cpu: 200m\n    memory: 500Mi\n\nfilebeat:\n  enabled: true\n</code></pre>"},{"location":"tech/devops/helm/#5-deployment","title":"5. Deployment","text":"<p>Traditionally you would have used <code>kubectl</code> to deploy to a <code>Kubernetes</code> cluster, by using the command <code>kubectl apply</code></p> <p>Now that you are using <code>HELM</code> you would need to switch that up to use <code>HELM</code> cli <code>upgrade</code> command :</p> <pre><code>helm upgrade --install ${app} devops/helm \\\n     -f audit/devops/${env}/values.yaml\n     --set image.tag=${tag}\n     --namespace=${namespace}\n     --wait\n</code></pre> <p>The <code>tag</code> value is being passed during deployment time, since the image tag will change everytime you build/push an docker image into your registry</p>"},{"location":"tech/devops/helm/#attention-point","title":"Attention point","text":"<p>If you have existing <code>Kubernetes</code> manifests in a cluster, and wan to migrate them to use a <code>HELM</code> chart, you will need to add some labels and annotations prior to the migration.</p> <p><code>HELM</code> won't know how to manage an existing <code>Kubernetes</code> manifests without the following :</p> <p>labels :</p> <pre><code>app.kubernetes.io/managed-by: Helm\n</code></pre> <p>annotations :</p> <pre><code>meta.helm.sh/release-name: ...\nmeta.helm.sh/release-namespace: ...\n</code></pre>"},{"location":"tech/devops/helm/#resources","title":"Resources","text":"<ul> <li>Getting Started</li> <li>Introduction \u00e0 Helm</li> </ul>"},{"location":"tech/devops/kubectl/","title":"My most used K8S commands","text":""},{"location":"tech/devops/kubectl/#deployments","title":"Deployments","text":"<pre><code>kubectl get deployments -n &lt;namespace&gt;\n</code></pre> <p>You can hide headers with <code>--no-headers</code></p> <pre><code>kubectl get deployments \n    --no-headers\n    -n &lt;namespace&gt;\n</code></pre> <p>You can select custom columns, for example to show deployments with available replicas</p> <pre><code>kubectl get deployments\n  -o custom-columns=\"NAME:.metadata.name, REPLICAS:.status.availableReplicas\"\n  -n &lt;namespace&gt;\n</code></pre>"},{"location":"tech/devops/kubectl/#cron-jobs","title":"Cron Jobs","text":"<pre><code>kubectl get cronjobs -n &lt;namespace&gt;\n</code></pre> <p>You can check the last scheduled time, last successful time and suspended info for all cron jobs with : </p> <pre><code>kubectl get cronjobs \n   -o custom-columns=\"NAME:.metadata.name, LAST_SCHEDULED:.status.lastScheduleTime, LAST_SUCCESSFUL=.status.lastSuccessfulTime, ON_HOLD:.spec.suspend\"\n   -n &lt;namespace&gt; \n</code></pre>"},{"location":"tech/devops/kubectl/#jobs","title":"Jobs","text":"<pre><code>kubectl get jobs -n &lt;namespace&gt;\n</code></pre> <p>You can get the latest jobs sorted by creation timestamp for a given cron job (by filtering by label)</p> <pre><code>kubectl get jobs \n    -l app.kubernetes.io/component=&lt;cron-job-name&gt;\n    --sort-by=.metadata.creationTimestamp\n    -n &lt;namespace&gt;\n</code></pre> <p>To return the latest job status for a given cron job, you can run the following command </p> <pre><code>kubectl get jobs \n    -l app.kubernetes.io/component=&lt;cron-job-name&gt;\n    --sort-by=.metadata.creationTimestamp\n    -o jsonpath='{.items[-1].status.conditions[-1].type}'\n    -n &lt;namespace&gt;\n</code></pre> <p>Trigger/Launch job</p> <pre><code>kubectl create job &lt;job-name&gt; \n    --from=cronjob/&lt;cron-job-name&gt;\n    -n &lt;namespace&gt;\n</code></pre>"},{"location":"tech/devops/kubectl/#pods","title":"Pods","text":"<pre><code>kubectl get pods -n &lt;namespace&gt;\n</code></pre> <p>You can get logs of a given pod </p> <pre><code>kubectl get logs &lt;pod-name&gt; -n &lt;namespace&gt;\n</code></pre> <p>Tip : You can save terminal output with <code>command &gt; file.txt</code>, for example </p> <pre><code>kubectl get logs &lt;pod-name&gt; -n &lt;namespace&gt; &gt; pod-logs.txt\n</code></pre> <p>Or you can even append it into an existing file with <code>command &gt;&gt; existing-file.txt</code>, for example  </p> <pre><code>kubectl get logs &lt;pod-name&gt; -n &lt;namespace&gt; &gt;&gt; pod-logs.txt\n</code></pre> <p>You can get more details about the pods with the following command : </p> <pre><code>kubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;\n</code></pre>"},{"location":"tech/shell/awk/","title":"Text processing with <code>awk</code>","text":"<p><code>awk</code> is a command-line tool used for pattern scanning and processing. It's helps search, extract and transform text based on patterns. It's also handy when working with files.</p>"},{"location":"tech/shell/awk/#extracting-fields","title":"Extracting fields","text":"<p>Extracts username (3rd field) and filenames (9th field) from <code>ls -l</code> output.</p> <pre><code>ls -l | awk '{ print $3, $9 }'\n</code></pre>"},{"location":"tech/shell/awk/#filtering-rows","title":"Filtering rows","text":"<p>Shows processes using more than 50% CPU</p> <pre><code>ps aux | awk '$3 &gt; 50 { print $0 }'\n</code></pre> <p><code>$3</code> refers to the third field, which is the CPU usage in ps aux output.</p>"},{"location":"tech/shell/awk/#working-with-files","title":"Working with files","text":"<p>Let's say we have the following csv file : <code>items.csv</code></p> <pre><code>item,price\nItemA,12.50\nItemB,7.99\nItemC,20.00\nItemD,5.25\nItemE,9.30\n</code></pre> <p>You can print the entire file content with </p> <pre><code>awk '{ print $0 }' items.csv\n</code></pre> <p>We can add a line number by adding <code>NR</code></p> <pre><code>awk '{ print NR, $0 }' items.csv\n</code></pre> <p>Since it's a csv file, We can omit headers by adding <code>NR &gt; 1</code></p> <pre><code>awk 'NR &gt; 1 { print $0 }' items.csv\n</code></pre> <p>We can print by specifying columns</p> <pre><code>awk -F ',' '{ print $1, $2 }' items.csv\n</code></pre> <p><code>-F ','</code> flag define the field separator, the default field separator is a whitespace</p>"},{"location":"tech/shell/awk/#summing-values","title":"Summing values","text":"<p>To calculate the total price of all items </p> <pre><code>awk -F ',' 'NR &gt; 1 { sum += $2 } END { print \"Total:\", sum }' items.csv\n</code></pre> <p><code>END</code> is a block that runs after all lines are processed</p>"},{"location":"tech/shell/awk/#map-based-on-condition","title":"Map based on condition","text":"<p>Label items as \"High\" or \"Low\" based on their price</p> <pre><code>awk -F ',' 'NR &gt; 1 { if ($2 &gt; 10) print $1, \"is High\"; else print $1, \"is Low\" }' items.csv\n</code></pre>"},{"location":"tech/shell/curl/","title":"Making HTTP requests with curl","text":"<p><code>curl</code> is a command-line tool used to transfer data to or from a server using HTTP. It\u2019s especially handy for APIs.</p> <pre><code>curl https://example.com\n</code></pre> <p>This command will send an HTTP GET request to https://example.com and display the HTML content of the response in your terminal.</p>"},{"location":"tech/shell/curl/#-x-or-request-specifies-the-http-method-to-use-eg-get-post-put-delete","title":"<code>-X</code> or <code>--request</code>: Specifies the HTTP method to use (e.g., GET, POST, PUT, DELETE)","text":"<pre><code>curl -X POST https://api.example.com/users\n</code></pre>"},{"location":"tech/shell/curl/#-d-or-data-sends-data-in-the-request-body","title":"<code>-d</code> or <code>--data</code>: Sends data in the request body","text":"<pre><code>curl -X POST https://jsonplaceholder.typicode.com/posts \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"title\":\"Hello\",\"body\":\"Mini blog rocks\",\"userId\":1}'\n</code></pre>"},{"location":"tech/shell/curl/#-h-or-header-adds-custom-headers-to-the-request","title":"<code>-H</code> or <code>--header</code>: Adds custom headers to the request","text":"<pre><code>curl -H \"Authorization: Bearer &lt;your_token&gt;\" https://api.example.com/profile\n</code></pre>"},{"location":"tech/shell/curl/#-o-or-output-saves-the-downloaded-content-to-a-file","title":"<code>-o</code> or <code>--output</code>: Saves the downloaded content to a file","text":"<pre><code>curl https://example.com/image.png -o image.png\n</code></pre> <p>Mastering <code>curl</code> gives you an edge when working with APIs, scripts, and backend debugging.</p>"},{"location":"tech/shell/grep/","title":"Text searching with grep","text":"<p><code>grep</code> stands for Global Regular Expression Print. It\u2019s a command-line utility that searches for lines that match a pattern.</p>"},{"location":"tech/shell/grep/#use-cases","title":"Use cases","text":""},{"location":"tech/shell/grep/#search","title":"Search","text":"<p>Searches for \"pattern\" in file.txt and prints every matching line</p> <pre><code>grep \"pattern\" file.txt\n</code></pre>"},{"location":"tech/shell/grep/#case-insensitive-search","title":"Case-insensitive search","text":"<p>Finds \"hello\", \"Hello\", \"HELLO\", etc</p> <pre><code>grep -i \"hello\" greetings.txt\n</code></pre>"},{"location":"tech/shell/grep/#view-line-numbers","title":"View line numbers","text":"<p>Adds line numbers to the matching lines</p> <pre><code>grep -n \"main\" script.py\n</code></pre>"},{"location":"tech/shell/grep/#exclude-lines-inverse-match","title":"Exclude lines (inverse match)","text":"<p>Shows every line except the ones with \"DEBUG\"</p> <pre><code>grep -v \"DEBUG\" logs.txt\n</code></pre>"},{"location":"tech/shell/grep/#search-all-files-in-a-directory","title":"Search all files in a directory","text":"<p>Recursively search for \"error\" in all files under ./src</p> <pre><code>grep -r \"error\" ./src\n</code></pre>"},{"location":"tech/shell/grep/#match-exact-words","title":"Match exact words","text":"<p>Matches only the word \"cat\", not \"catalog\" or \"educate\"</p> <pre><code>grep -w \"cat\" animals.txt\n</code></pre>"},{"location":"tech/shell/grep/#highlight","title":"Highlight","text":"<pre><code>grep --color=auto \"foo\" file.txt\n</code></pre>"},{"location":"tech/shell/grep/#find-files","title":"Find files","text":"<pre><code>grep -l \"TODO\" *.js\n</code></pre>"},{"location":"tech/shell/grep/#search-with-regular-expressions","title":"Search with regular expressions","text":"<pre><code>grep -E \"dog|cat\" animals.txt\n</code></pre>"},{"location":"tech/shell/jq/","title":"JSON processing in command line with <code>jq</code>","text":"<p><code>jq</code> is a command line JSON processor which will help you pretty-print and filter a JSON in a terminal</p>"},{"location":"tech/shell/jq/#format-json","title":"Format JSON","text":"<pre><code>echo '{\"user\": {\"name\": \"Elie\", \"age\": 29}}' | jq .\n</code></pre>"},{"location":"tech/shell/jq/#extract-specific-fields","title":"Extract specific fields","text":"<pre><code>echo '{\"user\": {\"name\": \"Elie\", \"age\": 29}}' | jq '.user.name'\n</code></pre>"},{"location":"tech/shell/jq/#extract-fields-from-an-array","title":"Extract fields from an array","text":"<pre><code>echo '[{\"project\": \"frontend\", \"status\": \"ok\"}, {\"project\": \"backend\", \"status\": \"ko\"}]' | jq '.[] | .project'\n</code></pre>"},{"location":"tech/shell/jq/#filter-an-array","title":"Filter an array","text":"<pre><code>echo '[{\"project\": \"frontend\", \"status\": \"ok\"}, {\"project\": \"backend\", \"status\": \"ko\"}]' | jq '.[] | select(.status==\"ok\")'\n</code></pre>"},{"location":"tech/shell/jq/#transform-json","title":"Transform JSON","text":"<pre><code>echo '{\"firstName\": \"Elie\", \"lastName\": \"Daher\"}' | jq '{fullName: (.firstName + \" \" + .lastName)}'\n</code></pre> <p><code>jq</code> helps specially when we call an endpoint or a cli that returns a JSON response. </p>"},{"location":"tech/shell/sed/","title":"Text editing with sed","text":"<p><code>sed</code>, short for Stream Editor, is a Unix utility that parses and transforms text, often in a single line of code.</p>"},{"location":"tech/shell/sed/#use-cases","title":"Use Cases","text":""},{"location":"tech/shell/sed/#find-and-replace","title":"Find and replace","text":"<p>Replaces the first occurrence of \"apple\" with \"orange\" on each line.</p> <pre><code>sed 's/apple/orange/g' file.txt\n</code></pre> <p>Adds the g flag to replace all instances per line.</p>"},{"location":"tech/shell/sed/#delete-a-line","title":"Delete a Line","text":"<p>Deletes the 3rd line</p> <pre><code>sed '3d' file.txt\n</code></pre> <p>Deletes any line containing the word \"error\".</p> <pre><code>sed '/error/d' file.txt\n</code></pre>"},{"location":"tech/shell/sed/#insert-or-append","title":"Insert or Append","text":"<p>Inserts a line before line 3</p> <pre><code>sed '3i\\New line above line 3' file.txt\n</code></pre> <p>Appends a line after line 3</p> <pre><code>sed '3a\\New line below line 3' file.txt\n</code></pre>"},{"location":"tech/shell/sed/#print-specific-lines","title":"Print Specific Lines","text":"<p>Prints only line 5. The -n flag suppresses automatic output.</p> <pre><code>sed -n '5p' file.txt\n</code></pre> <p>Prints lines 2 through 4</p> <pre><code>sed -n '2,4p' file.txt\n</code></pre>"}]}